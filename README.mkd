# NAME

OnApp::API - Perlish interface to OnApp API

# SYNOPSIS

    use OnApp::API;
    my $vm = OnAPP::API->(
           api_email => $email,
	 api_key   => $key,
	 api_url   => $url,
    );

    my $hashOfVms = $vm->getVMs();

# CONSTRUCTOR AND STARTUP

### new()

Creates and returns an OnApp::API object. Expects authentication and endpoint details:

    my $vm = OnApp::API->new)
          api_email => "name@domain.com",
          api_key	  => "supersecretkey",
          api_url   => "url.of.the.onapp.box",
    );

You can, if you prefer, supply `api_email` with a web UI username and `api_key` with a web UI password.

# METHODS

## VMs

### getVMs()

Returns a reference to a hash-of-hashes whose keys are the hostnames of the VMs:

    my $vms = $vm->getVMs;

    $vms->{'hostname'}

### createVM();

## TEMPLATES

### getTemplates()

Returns a hashref describing the templates. This is a hash-of-hashes, where the keys
are the ID of the template described in the constituent hashes.

# PRIVATE METHODS

Don't use these.

## _tidyData()

Makes the data structure more sane. The API, when passed through `JSON::decode_json()`, 
produces an array of hashrefs. Each of those hashes itself contains a single hashref
describing the elements being returned.

This takes that structure and rearranges it into a single hash of hashrefs. The keys of
the parent hash are the value of a single key from each of the constituent hashes, defined 
by the scond parameter to `tidyData`:

    $ref $self->tidyData($ref, "hostname");

will rearrange the $ref structure such that 

    keys(%{ $ref });

will return a list of hostnames.

## _applyFilter(), _applyAndFilter(), _applyOrFilter()

This is currently not used. It seems a bit pointless trying to provide a
generic filter here when it might as well be done outside of the module
in a more specific way, or by the API itself (which it isn't).

_applyFilter is passed two hashrefs:

    data:      some data to filter
    andFilter: a set of filtering criteria

It calls _applyAndFilter (and will, in the future, call _applyOrFilter)
to do the filtering. Currently, it's a bit crude. The expectation is that
`data` will be a hash of hashes. Each of its constituent hashes is kept if, 
and only if, each of its keys mentioned in `andFilter` case-insensitively
matches the corresponding value in `andFilter`

## _getRef()

Given a full URL (as returned by `_getURL` ), returns a hashref containing
The data.

### _makeJson()

Given a hashref, creates some JSON for passing to OnApp. Doesn't yet exist.

## _getUrl()
Used to create URLs from easy-to-remember names. For example, to get
the correct URL for the API to return a list of users, you can do

    _getURL("get", "users");

These URLs are then passed to `_getRef`.

## _getHash()

Deprecated already, in favour of `_getRef`. 'cause references are cool.

# SEE ALSO

[http://cdn.onapp.com/files/docs/onapp_cloud_2-3_api_guide_v1-3.pdf](http://cdn.onapp.com/files/docs/onapp_cloud_2-3_api_guide_v1-3.pdf)

# COPYRIGHT

Copyright 2011 Avi Greenbury (bigreds)

All right reserved. This program is free software; you can redistribute it and/or modify 
it under the same terms as Perl itself or, at your option, under the BSD license.

# AUTHOR
  bigreds (Avi Greenbury) bigreds@cpan.org