# NAME

OnApp::API - Perlish interface to OnApp API

# SYNOPSIS

    use OnApp::API;
    my $vm = OnAPP::API->(
           api_email => $email,
	 api_key   => $key,
	 api_url   => $url,
    );

    my $hashOfVms = $vm->getVMs();

# CONSTRUCTOR AND STARTUP

### new()

Creates and returns an OnApp::API object. Expects authentication and endpoint details:

    my $vm = OnApp::API->new)
          api_email => "name@domain.com",
          api_key	  => "supersecretkey",
          api_url   => "url.of.the.onapp.box",
    );

You can, if you prefer, supply api_email with an api_username and api_key with an api password.

# METHODS

## VMs

### getVMs()

Returns a reference to a hash-of-hashes whose keys are the hostnames of the VMs:

    my %vms = %{ $vm->getVMs };

You may provide some criteria with which to filter the machines:

    my $vms = vm->getVMs(
            andFilter => {
                    operating_system => "linux",
                    admin_note       => "temporary"
            }
     )

This is a ludicrously crude filter, currently. See the docs for _applyFilter in the
private methods section.

## TEMPLATES

### getTemplates()

Returns a hashref describing the templates. This is a hash-of-hashes, where the keys
are the ID of the template described in the value.



# PRIVATE METHODS

Don't use these.

## _tidyData()

Makes the data structure more sane. It comes out of the API as a hash of arrays, each 
containing a single element which is a hash reference representing whatever we've asked
for.

This rejigs it to be a hash of hashes. They key for the constituent hashes are the value
of a property of what's being described. This name is given as the second parameter.

For example:

    $self->_dityData($vmref, "hostname");

Will rearrange the hash reference `$vmref` (which presumably contains hashes describing
virtual machines) such that it's a hash-of-hashes where each element's keys are the 
hostname of the machine described in the value.



## _applyFilter(), _applyAndFilter(), _applyOrFilter()



_applyFilter is passed three hashrefs:

    data:      some data to filter
    andFilter: a set of filtering criteria

It calls _applyAndFilter (and will, in the future, call _applyOrFilter)
to do the filtering. Currently, it's a bit crude. The expectation is that
`data` will be a hash of hashes. Each of its constituent hashes is kept if, 
and only if, each of its keys mentioned in `andFilter` case-insensitively
matches the corresponding value in `andFilter`

## _getRef()

Given a full URL (as returned by `_getURL`, returns a hashref containing
The data OnAPP returned.

## _getUrl()
Used to create URLs from easy-to-remember names. For example, to get
the correct URL for the API to return a list of users, you can do

    _getURL("get", "users");

These URLs are then passed to `_getRef`.

## _getHash()

Deprecated already. In favour of `_getRef`. 'cause references are cool.

# SEE ALSO

[http://cdn.onapp.com/files/docs/onapp_cloud_2-3_api_guide_v1-3.pdf](http://cdn.onapp.com/files/docs/onapp_cloud_2-3_api_guide_v1-3.pdf)

# COPYRIGHT

Copyright 2011 Avi Greenbury (bigreds)

All right reserved. This program is free software; you can redistribute it and/or modify 
it under the same terms as Perl itself or, at your option, under the BSD license.

# AUTHOR
  bigreds (Avi Greenbury) bigreds@cpan.org